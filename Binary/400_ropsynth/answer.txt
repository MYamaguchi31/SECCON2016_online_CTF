つないでみる。
==
$ nc haswell.chari.mydns.jp 11111
stage 1/5
9PT09PT09A8FQV9Jge/epydNSYHvywLEUUmB74HSK3VJgfeHoDQTSYHHnJucN0mB/yvK1CN0AvT0QVxJgcQ4Ahh+SYHEBMfDaUmB9Lj7jFhJgexdQh8HSYH0VjxtHkmB9GFcMGhJgcTQKq4xSYH8DIwAbXQH9PT09PT09MP09PT0Xl1IgcUHvldrSIH131wWNUiBxadnvDZIgcXelnNUSIH1BI/vQUiB/ZbSmVR0AvT0W0iB607kDlRIgcOiyulMSIHz55B0NUiB60yUAw5IgetGB5l+SIHDG6ZoKUiBw4wYckxIgetpJ0VASIH7RjUnQHQI9PT09PT09PRBXkmBxtxOOX5JgfblmmFuSYH2BfMSBEmB/kLJTFh0BvT09PT09MP09PT0UFpZSIHBB+DAN0iB+TTQ6QZ0CPT09PT09PT0QV9JgffPwgpiSYHHvZG4D0mB/4SREQB0BvT09PT09FtIgeush1waSIHDsAg4DUiB848nfVVIgcMWWCpdSIHrjfYWRUiB+0B3EWF0BfT09PT0QV5JgcYJj+AbSYH2gubhO0mB/kDymDd0AvT0QV9Jge+iyIwcSYHHxF9mO0mB96BSO2NJgf/EREIddAX09PT09EFeSYH23cqsYkmB/j10wmJ0AvT0w/T09PT09PRQX11IgcXi1YVmSIH17yiVd0iBxZs7v05Ige2Io591SIHtUl+vaUiBxf8gkDhIgf0FEYUddAn09PT09PT09PRdSIHtsaFWFkiBxfzi03FIgcU1jRwTSIH9gXaae3QI9PT09PT09PRBX0mB70djkiVJgcdOjrdKSYHvuUlAMEmB/4O1eCF0CPT09PT09PT0QVxJgfQpysFvSYHEzB9ACEmBxIuQuF5JgcR7PXJ/SYH89zvuEXQF9PT09PRBXEmB9C6e61lJgfS/UzdbSYH0sAjQR0mBxPei93JJgfTAiO1JSYH8E0+5GnQF9PT09PTD9PT09PT09FhBXEmB7OvylXNJgfwfXrUbdAL09EFcSYHsChUtYEmB7Ic5tBdJgfxy6cJCdAb09PT09PRBXEmB9Nso4yhJgezuPKQHSYH0Ue9hXEmBxIRkBUJJgfSh0EZmSYHEHEu/X0mBxL+q3HxJgfxAL8pTdAP09PTD

NG
==

ropsynth.pyとlauncher.cを読むと、以下のことがわかる。
* バイナリデータがbase64エンコードされたもの
* このバイナリがR-Xは0x00800000に張り付く
* secretファイルを読み込み、それを標準出力に吐くROPチェーンを作り、base64エンコードして送ればよい。
* これを5回連続で成功させるとフラグが返ってくる。
* 1回あたりの制限時間は60秒。

毎回変化するガジェットから、ROPチェーンを合成させる問題。
ガジェット例。
==
00000007  0F05              syscall
00000009  415F              pop r15
0000000B  4981EFDEA7274D    sub r15,0x4d27a7de
00000012  4981EFCB02C451    sub r15,0x51c402cb
00000019  4981EF81D22B75    sub r15,0x752bd281
00000020  4981F787A03413    xor r15,0x1334a087
00000027  4981C79C9B9C37    add r15,0x379c9b9c
0000002E  4981FF2BCAD423    cmp r15,0x23d4ca2b
00000035  7402              jz 0x39
00000037  F4                hlt
00000038  F4                hlt
00000039  415C              pop r12
0000003B  4981C43802187E    add r12,0x7e180238
00000042  4981C404C7C369    add r12,0x69c3c704
00000049  4981F4B8FB8C58    xor r12,0x588cfbb8
00000050  4981EC5D421F07    sub r12,0x71f425d
00000057  4981F4563C6D1E    xor r12,0x1e6d3c56
0000005E  4981F4615C3068    xor r12,0x68305c61
00000065  4981C4D02AAE31    add r12,0x31ae2ad0
0000006C  4981FC0C8C006D    cmp r12,0x6d008c0c
00000073  7407              jz 0x7c
...
==
使えそうな命令は見つかるが、retするまでの条件を満たすようにスタックを作る必要がある。
手動じゃきびしいのでangrとかで自動化する感じで。

以下のコマンドを叩けばフラグゲット。
solver/solve.py haswell.chari.mydns.jp 11111
angrを入れておく必要あり。
まだスクリプトがいまいちなせいで、わりとよく失敗するけど、
根気よくやればいつかは通る。

