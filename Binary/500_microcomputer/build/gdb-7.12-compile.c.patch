--- gdb-7.12/sim/h8300/compile.c.orig	2016-08-02 00:50:21.000000000 +0900
+++ gdb-7.12/sim/h8300/compile.c	2016-12-10 17:19:34.688263000 +0900
@@ -1872,43 +1872,56 @@
 
   oldmask = h8_get_mask (sd);
   if (!h8300hmode || h8300_normal_mode)
     h8_set_mask (sd, 0xffff);
   do
     {
       unsigned short cidx;
       decoded_inst *code;
 
     top:
       cidx = h8_get_cache_idx (sd, pc);
       if (cidx == (unsigned short) -1 ||
 	  cidx >= sd->sim_cache_size)
 	goto illegal;
 	  
+#if 1
+      /*
+       * GDB stub rewrite instruction on memory for software breakpoint.
+       * Reload instruction every round. (But, this process is very slow...)
+       */
+      decode (sd, pc, h8_get_memory_buf (sd) + pc, sd->sim_cache + cidx);
+#endif
       code = sd->sim_cache + cidx;
 
 #if ADEBUG
       if (debug)
 	{
 	  printf ("%x %d %s\n", pc, code->opcode,
 		  code->op ? code->op->name : "**");
 	}
       h8_increment_stats (sd, code->opcode);
 #endif
 
       if (code->opcode)
 	{
+#if 1
+	  static int insn_count = 0;
+	  insn_count++;
+	  if (insn_count > 2000000)
+	    sim_engine_halt (sd, cpu, NULL, pc, sim_stopped, SIM_SIGILL);
+#endif
 	  cycles += code->cycles;
 	  insts++;
 	}
 
       switch (code->opcode)
 	{
 	case 0:
 	  /*
 	   * This opcode is a fake for when we get to an
 	   * instruction which hasnt been compiled
 	   */
 	  compile (sd, pc);
 	  goto top;
 	  break;
 
@@ -2656,30 +2669,31 @@
 	  goto next;
 
 	case O (O_BPL, SB):		/* bpl */
 	  if (N == 0)
 	    goto condtrue;
 	  goto next;
 	case O (O_BVC, SB):		/* bvc */
 	  if ((V == 0))
 	    goto condtrue;
 	  goto next;
 	case O (O_BVS, SB):		/* bvs */
 	  if ((V == 1))
 	    goto condtrue;
 	  goto next;
 
+#if 0
 	/* Trap for Command Line setup.  */
 	case O (O_SYS_CMDLINE, SB):
 	  {
 	    int i = 0;		/* Loop counter.  */
 	    int j = 0;		/* Loop counter.  */
 	    int ind_arg_len = 0;	/* Length of each argument.  */
 	    int no_of_args = 0;	/* The no. or cmdline args.  */
 	    int current_location = 0;	/* Location of string.  */
 	    int old_sp = 0;	/* The Initial Stack Pointer.  */
 	    int no_of_slots = 0;	/* No. of slots required on the stack
 					   for storing cmdline args.  */
 	    int sp_move = 0;	/* No. of locations by which the stack needs
 				   to grow.  */
 	    int new_sp = 0;	/* The final stack pointer location passed
 				   back.  */
@@ -2812,30 +2826,31 @@
 	    free (argv_ptrs);
 	    for (i = 0; i <= no_of_args; i++)
 	      {
 		free (h8_get_cmdline_arg (sd, i));
 	      }
 	    free (h8_get_command_line (sd));
 
 	    /* The no. of argv arguments are returned in Reg 0.  */
 	    h8_set_reg (sd, 0, no_of_args);
 	    /* The Pointer to argv in Register 1.  */
 	    h8_set_reg (sd, 1, new_sp);
 	    /* Setting the stack pointer to the new value.  */
 	    h8_set_reg (sd, SP_REGNUM, new_sp);
 	  }
 	  goto next;
+#endif
 
 	  /* System call processing starts.  */
 	case O (O_SYS_OPEN, SB):
 	  {
 	    int len = 0;	/* Length of filename.  */
 	    char *filename;	/* Filename would go here.  */
 	    char temp_char;	/* Temporary character */
 	    int mode = 0;	/* Mode bits for the file.  */
 	    int open_return;	/* Return value of open, file descriptor.  */
 	    int i;		/* Loop counter */
 	    int filename_ptr;	/* Pointer to filename in cpu memory.  */
 
 	    /* Setting filename_ptr to first argument of open,  */
 	    /* and trying to get mode.  */
 	    if ((h8300sxmode || h8300hmode || h8300smode) && !h8300_normal_mode)
@@ -2886,30 +2901,33 @@
 	    int fd;		/* File descriptor */
 	    int buf_size;	/* BUF_SIZE parameter in read.  */
 	    int i = 0;		/* Temporary Loop counter */
 	    int read_return = 0;	/* Return value from callback to
 					   read.  */
 
 	    fd = (h8300hmode && !h8300_normal_mode) ? GET_L_REG (0) : GET_W_REG (0);
 	    buf_size = (h8300hmode && !h8300_normal_mode) ? GET_L_REG (2) : GET_W_REG (2);
 
 	    char_ptr = (char *) malloc (sizeof (char) * buf_size);
 
 	    /* Callback to read and return the no. of characters read.  */
 	    read_return =
 	      sim_callback->read (sim_callback, fd, char_ptr, buf_size);
 
+	    if (read_return <= 0)
+	      sim_engine_halt (sd, cpu, NULL, pc, sim_stopped, SIM_SIGILL);
+
 	    /* The characters read are stored in cpu memory.  */
 	    for (i = 0; i < buf_size; i++)
 	      {
 		SET_MEMORY_B ((h8_get_reg (sd, 1) + (sizeof (char) * i)),
 			      *(char_ptr + (sizeof (char) * i)));
 	      }
 
 	    /* Return value in Register 0.  */
 	    h8_set_reg (sd, 0, read_return);
 
 	    /* Freeing memory used as buffer.  */
 	    free (char_ptr);
 	  }
 	  goto next;
 
@@ -2927,31 +2945,35 @@
 	    fd = (h8300hmode && !h8300_normal_mode) ? GET_L_REG (0) : GET_W_REG (0);
 	    char_ptr = (h8300hmode && !h8300_normal_mode) ? GET_L_REG (1) : GET_W_REG (1);
 	    len = (h8300hmode && !h8300_normal_mode) ? GET_L_REG (2) : GET_W_REG (2);
 
 	    /* Allocating space for the characters to be written.  */
 	    ptr = (char *) malloc (sizeof (char) * len);
 
 	    /* Fetching the characters from cpu memory.  */
 	    for (i = 0; i < len; i++)
 	      {
 		temp_char = GET_MEMORY_B (char_ptr + i);
 		ptr[i] = temp_char;
 	      }
 
 	    /* Callback write and return the no. of characters written.  */
+	    if (fd > 2)
+	    write_return = -1;
+	    else
 	    write_return = sim_callback->write (sim_callback, fd, ptr, len);
+	    if (fd == 1) fflush(stdout);
 
 	    /* Return value in Register 0.  */
 	    h8_set_reg (sd, 0, write_return);
 
 	    /* Freeing memory used as buffer.  */
 	    free (ptr);
 	  }
 	  goto next;
 
 	case O (O_SYS_LSEEK, SB):
 	  {
 	    int fd;		/* File descriptor */
 	    int offset;		/* Offset */
 	    int origin;		/* Origin */
 	    int lseek_return;	/* Return value from callback to lseek.  */
@@ -3499,34 +3521,41 @@
 	  pc = code->next_pc + res;
 	  goto call;
 
 	case O (O_RTE, SN):		/* rte, return from exception */
 	rte:
 	  /* Pops exr and ccr before pc -- otherwise identical to rts.  */
 	  tmp = h8_get_reg (sd, SP_REGNUM);
 
 	  if (h8300smode)			/* pop exr */
 	    {
 	      h8_set_exr (sd, GET_MEMORY_L (tmp));
 	      tmp += 4;
 	    }
 	  if (h8300hmode && !h8300_normal_mode)
 	    {
+#if 0
 	      h8_set_ccr (sd, GET_MEMORY_L (tmp));
 	      tmp += 4;
 	      pc = GET_MEMORY_L (tmp);
 	      tmp += 4;
+#else
+	      pc = GET_MEMORY_L (tmp);
+	      h8_set_ccr (sd, (pc >> 24) & 0xff);
+	      pc &= 0xffffff;
+	      tmp += 4;
+#endif
 	    }
 	  else
 	    {
 	      h8_set_ccr (sd, GET_MEMORY_W (tmp));
 	      tmp += 2;
 	      pc = GET_MEMORY_W (tmp);
 	      tmp += 2;
 	    }
 
 	  GETSR (sd);
 	  h8_set_reg (sd, SP_REGNUM, tmp);
 	  goto end;
 
 	case O (O_RTS, SN):		/* rts, return from subroutine */
 	rts:
@@ -3561,53 +3590,71 @@
 			       SIM_WEXITSTATUS (h8_get_reg (sd, 0)));
 	    }
 #if 0
 	  /* Unfortunately this won't really work, because
 	     when we take a breakpoint trap, R0 has a "random", 
 	     user-defined value.  Don't see any immediate solution.  */
 	  else if (SIM_WIFSTOPPED (h8_get_reg (sd, 0)))
 	    {
 	      /* Pass the stop signal up to gdb.  */
 	      sim_engine_halt (sd, cpu, NULL, pc, sim_stopped,
 			       SIM_WSTOPSIG (h8_get_reg (sd, 0)));
 	    }
 #endif
 	  else
 	    {
+#if 1
+	      /*
+	       * GDB puts sleep instruction for software breakpoint.
+	       * (See: gdb/h8300-tdep.c:h8300_breakpoint_from_pc())
+	       * Not halt, but generate trap interrupt and drive GDB stub
+	       * on sleep instruction.
+	       */
+	      res = 3; /* trapa #3 */
+	      goto forth_trap;
+#endif
 	      /* Treat it as a sigtrap.  */
 	      sim_engine_halt (sd, cpu, NULL, pc, sim_stopped, SIM_SIGTRAP);
 	    }
 	  goto end;
 
 	case O (O_TRAPA, SB):		/* trapa */
 	  if (fetch (sd, &code->src, &res))
    	    goto end;			/* res is vector number.  */
   
+#if 1
+	forth_trap:
+#endif
    	  tmp = h8_get_reg (sd, SP_REGNUM);
    	  if(h8300_normal_mode)
    	    {
    	      tmp -= 2;
    	      SET_MEMORY_W (tmp, code->next_pc);
    	      tmp -= 2;
    	      SET_MEMORY_W (tmp, h8_get_ccr (sd));
    	    }
    	  else
    	    {
+#if 0
    	      tmp -= 4;
    	      SET_MEMORY_L (tmp, code->next_pc);
    	      tmp -= 4;
    	      SET_MEMORY_L (tmp, h8_get_ccr (sd));
+#else
+	      tmp -= 4;
+	      SET_MEMORY_L (tmp, (h8_get_ccr (sd) << 24) | (code->next_pc & 0xffffff));
+#endif
    	    }
    	  intMaskBit = 1;
    	  BUILDSR (sd);
  
 	  if (h8300smode)
 	    {
 	      tmp -= 4;
 	      SET_MEMORY_L (tmp, h8_get_exr (sd));
 	    }
 
 	  h8_set_reg (sd, SP_REGNUM, tmp);
 
 	  if(h8300_normal_mode)
 	    pc = GET_MEMORY_L (0x10 + res * 2); /* Vector addresses are 0x10,0x12,0x14 and 0x16 */
 	  else
