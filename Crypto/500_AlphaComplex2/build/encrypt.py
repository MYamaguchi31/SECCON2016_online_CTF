from Crypto.Util.number import *
from Complex import CZ
import os

A = 160961529568726464041995619142037052930604221509556342322210347456868128903698056444688870906189986880082991600965381948087612063759058131770405038444761824167334752652436011816862457222857797987088522581789398525266265672237178358847688563262775255264508640384495309138927707468658126773943069509030154258128L
B = 37076027975349566658167287444958084341592035501513848477049237240403051532236871675192960938272255140745080693593350971940333684718066062046403077020106407807775121808604320931897100700189442374690601807161283750142748918105232215902773193987628379258126392437935458137520645181873740582396222693106891533030L

def randgen(N, A, B):
    seed = bytes_to_long(os.urandom(size(N)/8))
    while True:
        yield seed
        seed = (A * seed + B) % N

def loadpk(name):
    with open(name) as f:
        N = long(f.readline())
        e = long(f.readline())
    return (N, e)

(N, e) = loadpk("publickey")
rand = randgen(N, A, B)

with open("flag") as f:
    L = size(N)/8-1
    flag = f.readline().rstrip()
    pad = os.urandom(L-len(flag)-1)
    m = bytes_to_long(pad+"\0"+flag)

C = CZ(N)
with open("ciphertext", "w") as f:
    for i in range(e):
        y = next(rand)
        f.write(str(C(m, y)**e) + "\n")
